# -*- coding: utf-8 -*-
"""Plant Village Exploratory Data Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Lkg3pY7ZWc-7dB4tSbCszjvdEyHjeGOR
"""

print(4+4)

"""Import Necessary Lib"""

!pip install tensorflow tensorflow-datasets matplotlib seaborn numpy
import tensorflow as tf
import tensorflow_datasets as tfds
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from collections import Counter
import pandas as pd
import numpy as np

"""Load the Dataset"""

dataset, info = tfds.load('plant_village', with_info=True, as_supervised=True)

"""**DataSet Info**"""

print(info)

"""**Class Labels**"""

class_names = info.features['label'].names
print("Available Classes:", class_names)

"""Dataset Distribution"""

train_data = dataset['train']
labels = [label.numpy() for _, label in train_data]  # Use .numpy() on the Tensor, not the NumPy array
label_counts = Counter(labels)

for label, count in label_counts.items():
    print(f"{class_names[label]}: {count}")

"""Sample Pics"""

def show_images(dataset, class_names, num_images=9):
    plt.figure(figsize=(10, 10))
    for i, (image, label) in enumerate(dataset.take(num_images)):
        ax = plt.subplot(3, 3, i + 1)
        plt.imshow(image.numpy())
        plt.title(class_names[label.numpy()])
        plt.axis("off")

show_images(train_data, class_names)

"""Analyze Image Dimension"""

image_shapes = [image.shape for image, _ in tfds.as_numpy(train_data)]  # Remove .numpy()
heights = [shape[0] for shape in image_shapes]
widths = [shape[1] for shape in image_shapes]

plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
sns.histplot(heights, kde=True)
plt.title("Image Heights Distribution")

plt.subplot(1, 2, 2)
sns.histplot(widths, kde=True)
plt.title("Image Widths Distribution")
plt.show()

"""Analyze Color Channel"""

def calculate_channel_means(dataset, num_samples=1000):
    r_means, g_means, b_means = [], [], []
    for i, (image, _) in enumerate(tfds.as_numpy(dataset.take(num_samples))):
        r_means.append(np.mean(image[:, :, 0]))
        g_means.append(np.mean(image[:, :, 1]))
        b_means.append(np.mean(image[:, :, 2]))
    return np.mean(r_means), np.mean(g_means), np.mean(b_means)

r_mean, g_mean, b_mean = calculate_channel_means(train_data)
print(f"Red Channel Mean: {r_mean}")
print(f"Green Channel Mean: {g_mean}")
print(f"Blue Channel Mean: {b_mean}")

"""Plot Class Distribution

"""

plt.figure(figsize=(12, 8))
sns.barplot(x=[class_names[i] for i in label_counts.keys()], y=list(label_counts.values()))
plt.xticks(rotation=90)
plt.title("Number of Images per Class")
plt.show()

"""Analyze the Distribution of Healthy vs Diseased Leaves
Problem
"""

healthy_diseased_counts = {'Healthy': 0, 'Diseased': 0}

for label, count in label_counts.items():
    if 'healthy' in class_names[label].lower():
        healthy_diseased_counts['Healthy'] += count
    else:
        healthy_diseased_counts['Diseased'] += count

plt.figure(figsize=(6, 6))
sns.barplot(x=list(healthy_diseased_counts.keys()), y=list(healthy_diseased_counts.values()))
plt.title("Healthy vs Diseased Leaf Distribution")
plt.ylabel("Number of Images")
plt.show()

"""Find Which Plants Are Most Affected by Diseases

"""

plant_disease_counts = {}

for label, count in label_counts.items():
    plant_name = class_names[label].split(" ")[0]  # Extract plant name (e.g., "Apple", "Tomato")
    if plant_name not in plant_disease_counts:
        plant_disease_counts[plant_name] = 0
    plant_disease_counts[plant_name] += count

plt.figure(figsize=(12, 6))
sns.barplot(x=list(plant_disease_counts.keys()), y=list(plant_disease_counts.values()))
plt.xticks(rotation=90)
plt.title("Total Images Per Plant Type")
plt.ylabel("Number of Images")
plt.show()

"""Check If There Is Any Class Imbalance
Problem
"""

plt.figure(figsize=(15, 5))
sns.boxplot(y=list(label_counts.values()))
plt.title("Distribution of Images Across Classes")
plt.ylabel("Number of Images Per Class")
plt.show()

""" Analyze RGB Color Differences Between Healthy and Diseased Leaves

"""

healthy_r, healthy_g, healthy_b = [], [], []
diseased_r, diseased_g, diseased_b = [], [], []

for image, label in tfds.as_numpy(train_data):
    mean_r, mean_g, mean_b = np.mean(image[:, :, 0]), np.mean(image[:, :, 1]), np.mean(image[:, :, 2])

    if 'healthy' in class_names[label].lower():
        healthy_r.append(mean_r)
        healthy_g.append(mean_g)
        healthy_b.append(mean_b)
    else:
        diseased_r.append(mean_r)
        diseased_g.append(mean_g)
        diseased_b.append(mean_b)

plt.figure(figsize=(12, 6))

sns.kdeplot(healthy_r, color="red", label="Healthy Red", fill=True)
sns.kdeplot(healthy_g, color="green", label="Healthy Green", fill=True)
sns.kdeplot(healthy_b, color="blue", label="Healthy Blue", fill=True)

sns.kdeplot(diseased_r, color="red", linestyle="dashed", label="Diseased Red", fill=True)
sns.kdeplot(diseased_g, color="green", linestyle="dashed", label="Diseased Green", fill=True)
sns.kdeplot(diseased_b, color="blue", linestyle="dashed", label="Diseased Blue", fill=True)

plt.title("Color Channel Distribution in Healthy vs Diseased Leaves")
plt.legend()
plt.show()

""" Check the Average Brightness of Healthy vs Diseased Leaves

"""

healthy_brightness = []
diseased_brightness = []

for image, label in tfds.as_numpy(train_data):
    brightness = np.mean(image)

    if 'healthy' in class_names[label].lower():
        healthy_brightness.append(brightness)
    else:
        diseased_brightness.append(brightness)

plt.figure(figsize=(10, 6))
sns.kdeplot(healthy_brightness, label="Healthy Leaves", fill=True)
sns.kdeplot(diseased_brightness, label="Diseased Leaves", fill=True)
plt.title("Brightness Distribution in Healthy vs Diseased Leaves")
plt.xlabel("Average Pixel Intensity")
plt.legend()
plt.show()

